#!/usr/bin/env python3

import argparse
import os

import yaml

import helpers as hp

DESCRIBE_CMD = "kubectl get pods -n {namespace} {pod} -oyaml"


def main(opts):
    if opts.tucson:
        multus_name = "kube-system/misc-dds"
    else:
        multus_name = "kube-system/macvlan-conf"

    namespaces = ["auxtel", "ospl-daemon"]
    updates = hp.run_cmd("kubectl get ns -A -l argocd.argoproj.io/instance=nublado-users",
                         as_lines=True)
    for line in updates:
        if line == "":
            continue
        line = line.strip()
        if line.startswith("NAME"):
            continue
        namespaces.append(line.split()[0].strip())

    for namespace in namespaces:
        command = hp.GET_PODS_NAME_CMD + f" -n {namespace}"
        output = hp.run_cmd(command, as_lines=True)
        for line in output:
            if line == "":
                continue
            line = line.strip()
            if line == "NAME":
                continue
            output1 = hp.run_cmd(
                DESCRIBE_CMD.format(namespace=namespace, pod=line), as_lines=True
            )
            yaml_output = yaml.safe_load(os.linesep.join(output1))
            annotations = yaml_output["metadata"]["annotations"]
            # print(annotations)
            networks = yaml.safe_load(annotations["k8s.v1.cni.cncf.io/networks-status"])
            # print(type(networks))
            # print(networks)
            has_multus = False
            for network in networks:
                # print(network)
                if network["name"] == multus_name:
                    multus_ip = network["ips"][0]
                    print(f"{line} multus IP is {multus_ip}")
                    has_multus = True
            if not has_multus:
                print(f"{line} has no multus IP")


if __name__ == "__main__":
    description = ["This program lists the multus address on all pods in the"]
    description.append("standard deployment. Uses YAML output from kubectl.")
    parser = argparse.ArgumentParser(
        description=" ".join(description),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("-t", "--tucson", action="store_true", help="Use TTS information.")

    args = parser.parse_args()
    main(args)
